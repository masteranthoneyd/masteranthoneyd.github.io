<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ookamiAntD&#39;s Blog</title>
  
  <subtitle>Easy coding,easy life.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yangbingdong.com/"/>
  <updated>2020-10-11T02:26:14.586Z</updated>
  <id>http://yangbingdong.com/</id>
  
  <author>
    <name>ookamiAntD</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud Alibaba 介绍</title>
    <link href="http://yangbingdong.com/2020/spring-cloud-alibaba-introduce/"/>
    <id>http://yangbingdong.com/2020/spring-cloud-alibaba-introduce/</id>
    <published>2020-09-09T03:06:32.000Z</published>
    <updated>2020-10-11T02:26:14.586Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-cloud-alibaba/spring-cloud-alibaba-introduce.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;阿里作为国内最大的云厂家之一, 在微服务如火如荼的当下也紧跟时代, 推出了 Spring Cloud Alibaba 体系, 与自身的云产品有更好的融合. 本篇主要记录开源 Spring Cloud Alibaba 组件的简单实用.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Cloud" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Cloud/"/>
    
    
      <category term="Spring" scheme="http://yangbingdong.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://yangbingdong.com/tags/Spring-Cloud/"/>
    
      <category term="Spring Cloud Alibaba" scheme="http://yangbingdong.com/tags/Spring-Cloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发</title>
    <link href="http://yangbingdong.com/2020/weixin-mp-dev/"/>
    <id>http://yangbingdong.com/2020/weixin-mp-dev/</id>
    <published>2020-08-01T02:32:59.000Z</published>
    <updated>2020-08-10T08:33:21.399Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/weixin-dev/weixin-mp-dev-banner.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用微信提供的微信平台体系(微信开放平台/微信公众号平台/微信小程序/微信支付等)可以使我们的业务接入庞大的微信体系, 定义自己的个性化业务.&lt;/p&gt;
&lt;p&gt;这里主要记录一下微信公众号开发相关的要点…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Weixin" scheme="http://yangbingdong.com/tags/Weixin/"/>
    
  </entry>
  
  <entry>
    <title>Kuberbetes 常用概念及操作</title>
    <link href="http://yangbingdong.com/2020/kubernetes-guide/"/>
    <id>http://yangbingdong.com/2020/kubernetes-guide/</id>
    <published>2020-07-19T06:54:13.000Z</published>
    <updated>2020-11-12T11:01:47.941Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/k8s-learning/kubernetes-learning-banner.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;K8S(Kubernetes) 现在来说也不是什么新鲜的词了, 或许小公司玩得比较少, 自己也一直没有实操的机会. 幸会近来公司也开始使用 K8S, 有机会将学习过的东西在生产上实践一遍.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yangbingdong.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yangbingdong.com/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="http://yangbingdong.com/tags/Kubernetes/"/>
    
      <category term="K8S" scheme="http://yangbingdong.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 与 HandlerInterceptor 的认证鉴权</title>
    <link href="http://yangbingdong.com/2020/spring-security-mvc-interceptor/"/>
    <id>http://yangbingdong.com/2020/spring-security-mvc-interceptor/</id>
    <published>2020-05-26T08:30:58.000Z</published>
    <updated>2020-07-20T03:52:03.971Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-boot-security/spring-authentication-banner.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇总结分别基于 Spring Security 与 Spring MVC HandlerInterceptor 实现认证鉴权.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://yangbingdong.com/tags/Spring/"/>
    
      <category term="Spring Security" scheme="http://yangbingdong.com/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>位运算以及常用场景</title>
    <link href="http://yangbingdong.com/2020/bit-operation/"/>
    <id>http://yangbingdong.com/2020/bit-operation/</id>
    <published>2020-01-15T04:02:36.000Z</published>
    <updated>2020-09-25T05:53:57.839Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/bit-operation/bit-operation-banner.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;位运算以及常用场景(装X)…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Algorithms" scheme="http://yangbingdong.com/categories/Programming/Algorithms/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Algorithms" scheme="http://yangbingdong.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>并发设计模式</title>
    <link href="http://yangbingdong.com/2019/java-concurrent-part5/"/>
    <id>http://yangbingdong.com/2019/java-concurrent-part5/</id>
    <published>2019-10-29T03:45:41.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/concurrent/java-concurrent-part5-banner.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;并发领域中也有诸多的设计模式.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/categories/Programming/Java/Concurrent/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/tags/Concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发拾遗-并发工具(下)</title>
    <link href="http://yangbingdong.com/2019/java-concurrent-part4/"/>
    <id>http://yangbingdong.com/2019/java-concurrent-part4/</id>
    <published>2019-09-15T09:04:25.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/concurrent/java-concurrent-part4-banner-min.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这一篇关于线程池与Future相关.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/categories/Programming/Java/Concurrent/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/tags/Concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发拾遗-并发工具(中)</title>
    <link href="http://yangbingdong.com/2019/java-concurrent-part3/"/>
    <id>http://yangbingdong.com/2019/java-concurrent-part3/</id>
    <published>2019-09-10T07:43:54.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/concurrent/java-concurrent-part3-banner2.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;此篇聊聊 线程安全的容器 以及 JDK 原子类的简单使用.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/categories/Programming/Java/Concurrent/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/tags/Concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发拾遗-并发工具(上)</title>
    <link href="http://yangbingdong.com/2019/java-concurrent-part2/"/>
    <id>http://yangbingdong.com/2019/java-concurrent-part2/</id>
    <published>2019-09-06T02:45:59.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/concurrent/java-concurrent-lock-condition-banner.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JDK 并发包中有着许许多多的工具类, 将分为上中下三篇回顾这些工具类以及其简单的使用.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/categories/Programming/Java/Concurrent/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/tags/Concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发拾遗-并发理论基础</title>
    <link href="http://yangbingdong.com/2019/java-concurrent-part1/"/>
    <id>http://yangbingdong.com/2019/java-concurrent-part1/</id>
    <published>2019-08-28T08:58:19.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/concurrent/java-concurrnt-part1-banner.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;时代在进步, 硬件也在进步, 为了提高 CPU 以及 IO 的利用率, 并发编程已经慢慢成为一项必备技能. 过往总对并发编程感到恐惧, 应为对其的陌生导致了编码方面的困难以及诸多的 BUG, 学习并发编程, 一定需要有一个系统性的学习过程.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/categories/Programming/Java/Concurrent/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Concurrent" scheme="http://yangbingdong.com/tags/Concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA 拾遗</title>
    <link href="http://yangbingdong.com/2019/spring-boot-data-jpa-learning/"/>
    <id>http://yangbingdong.com/2019/spring-boot-data-jpa-learning/</id>
    <published>2019-07-17T08:45:26.000Z</published>
    <updated>2020-04-07T10:15:47.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-boot-orm/jpa-logo.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; JPA在国内的使用频率较小, 但也是一个值得学习的极为优秀的ORM框架, DDD的思想在里面体现得淋漓尽致.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 之数据篇</title>
    <link href="http://yangbingdong.com/2019/spring-boot-learning-orm/"/>
    <id>http://yangbingdong.com/2019/spring-boot-learning-orm/</id>
    <published>2019-06-15T03:43:02.000Z</published>
    <updated>2020-04-07T10:15:47.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-boot-orm/spring-data-learning.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;后端应用当中与DB交互也是必不可少的一部, 在Java中我们将交互部分抽象成了 &lt;strong&gt;ORM&lt;/strong&gt;(Object Relational Mapping), 以下是数据源以及ORM相关…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>线上问题定位常用技巧</title>
    <link href="http://yangbingdong.com/2019/localize-server-problem/"/>
    <id>http://yangbingdong.com/2019/localize-server-problem/</id>
    <published>2019-05-05T09:09:02.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/online-debug/locate.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;线上问题无可避免, 人为BUG, 系统资源限制等, 通过合理的手段可让问题现出原形, 这里记录一些常用的排查手段.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="MAT" scheme="http://yangbingdong.com/tags/MAT/"/>
    
  </entry>
  
  <entry>
    <title>Rabbit &amp; Spring AMQP 入门</title>
    <link href="http://yangbingdong.com/2019/rabbitmq-and-spring-amqp-learning/"/>
    <id>http://yangbingdong.com/2019/rabbitmq-and-spring-amqp-learning/</id>
    <published>2019-04-25T08:44:51.000Z</published>
    <updated>2020-04-23T10:04:19.385Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/rabbitmq-learning/spring-rabbitmq-banner.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MQ(Message Queue, 消息队列)是一种应用系统之间的通信方法. 是通过读写出入队列的消息来通信(RPC则是通过直接调用彼此来通信的). &lt;/p&gt;
&lt;p&gt;AMQP, 即Advanced Message Queuing Protocol, 高级消息队列协议, 是应用层协议的一个开放标准, 为面向消息的中间件设计. 消息中间件主要用于组件之间的解耦, 消息的发送者无需知道消息使用者的存在, 反之亦然.&lt;br&gt;AMQP的主要特征是面向消息, 队列, 路由(包括点对点和发布/订阅), 可靠性, 安全. &lt;/p&gt;
&lt;p&gt;RabbitMQ是一个开源的AMQP&lt;strong&gt;实现&lt;/strong&gt;, 服务器端用Erlang语言编写. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://yangbingdong.com/tags/Spring-Cloud/"/>
    
      <category term="RabbitMQ" scheme="http://yangbingdong.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>使用Caddy部署Https静态博客站点</title>
    <link href="http://yangbingdong.com/2019/use-caddy-to-deploy-static-blog-with-https/"/>
    <id>http://yangbingdong.com/2019/use-caddy-to-deploy-static-blog-with-https/</id>
    <published>2019-02-13T14:40:50.000Z</published>
    <updated>2020-04-07T10:15:47.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/caddy/caddy-banner.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Github Pages 在国内访问速度不理想, 其他国内的免费静态页面服务(Coding等)有时候也比较慢, 于是决定自己使用国内的云服务器部署静态博客. 一般是通过Nginx可以做到, 但是要开启Https以及Http2还需要手动配置一些东西, 面向普通用户不太友善, 这时候可以使用 &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://caddyserver.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Caddy&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; 来做到简易部署Https的静态博客…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yangbingdong.com/categories/VPS/"/>
    
    
      <category term="Hexo" scheme="http://yangbingdong.com/tags/Hexo/"/>
    
      <category term="VPS" scheme="http://yangbingdong.com/tags/VPS/"/>
    
      <category term="Caddy" scheme="http://yangbingdong.com/tags/Caddy/"/>
    
  </entry>
  
  <entry>
    <title>Nexus搭建与Maven配置</title>
    <link href="http://yangbingdong.com/2019/nexus3-by-docker/"/>
    <id>http://yangbingdong.com/2019/nexus3-by-docker/</id>
    <published>2019-01-21T06:40:59.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/docker-nexus3/nexus-logo.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一般每个企业里面都有属于自己的Nexus服务器作为自己的私服（代理），私服好处众多，例如加速构建、稳定，节省带宽、节省中央&lt;code&gt;maven&lt;/code&gt;仓库的带宽，控制和审计，可以建立本地内部仓库、可以建立公共仓库等等。&lt;code&gt;Docker&lt;/code&gt; 可以大大简化服务器的部署，并且Nexus3已经支持&lt;code&gt;Docker Image&lt;/code&gt;啦～爽歪歪&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Maven" scheme="http://yangbingdong.com/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yangbingdong.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Spring与任务调度</title>
    <link href="http://yangbingdong.com/2018/spring-boot-scheduler/"/>
    <id>http://yangbingdong.com/2018/spring-boot-scheduler/</id>
    <published>2018-12-02T06:23:13.000Z</published>
    <updated>2020-04-07T10:15:47.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/scheduler/scheduler-banner.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇主要记录&lt;strong&gt;任务调度&lt;/strong&gt;相关框架知识. &lt;/p&gt;
&lt;p&gt;任务调度这个在日常开发中非常经典, 比如每天固定时刻同步用户信息、或者是动态的活动开始与结束时间, 亦或者每天早上8点发条短信鼓励一下自己今天努力填坑之类的. . . &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
      <category term="Scheduler" scheme="http://yangbingdong.com/tags/Scheduler/"/>
    
  </entry>
  
  <entry>
    <title>Redis拾遗与Spring Boot整合</title>
    <link href="http://yangbingdong.com/2018/spring-boot-learning-redis/"/>
    <id>http://yangbingdong.com/2018/spring-boot-learning-redis/</id>
    <published>2018-10-06T08:15:04.000Z</published>
    <updated>2020-07-15T11:05:06.641Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-boot-redis/redis-logo.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库, 并提供多种语言的API. 相比&lt;code&gt;Memcached&lt;/code&gt;它支持存储的类型相对更多&lt;strong&gt;（字符、哈希、集合、有序集合、列表、GEO）&lt;/strong&gt;, &lt;strong&gt;同时Redis是线程安全的&lt;/strong&gt;. 2010年3月15日起, Redis的开发工作由VMware主持, 2013年5月开始, Redis的开发由&lt;code&gt;Pivotal&lt;/code&gt;赞助. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Redis" scheme="http://yangbingdong.com/tags/Redis/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁的几种实现方式</title>
    <link href="http://yangbingdong.com/2018/distribution-lock/"/>
    <id>http://yangbingdong.com/2018/distribution-lock/</id>
    <published>2018-09-15T09:19:33.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/distribute-lock/distribute-lock-banner.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在现代互联网, 通常都是伴随着分布式、高并发等, 在某些业务中例如下订单扣减库存, 如果不对库存资源做临界处理, 在并发量大的时候会出现库存不准确的情况. 在单个服务的情况下可以通过Java自带的一些锁对临界资源进行处理, 例如&lt;code&gt;synchronized&lt;/code&gt;、&lt;code&gt;Reentrantlock&lt;/code&gt;, 甚至是通过无锁技术（比如&lt;code&gt;RangeBuffer&lt;/code&gt;）都可以实现同一个JVM内的锁. But, 在&lt;strong&gt;能够弹性伸缩的分布式环境&lt;/strong&gt;下, Java内置的锁显然不能够满足需求, 需要借助外部进程实现分布式锁. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Redis" scheme="http://yangbingdong.com/tags/Redis/"/>
    
      <category term="Zookeeper" scheme="http://yangbingdong.com/tags/Zookeeper/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://yangbingdong.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习之测试篇</title>
    <link href="http://yangbingdong.com/2018/spring-boot-learning-testing/"/>
    <id>http://yangbingdong.com/2018/spring-boot-learning-testing/</id>
    <published>2018-08-28T02:16:40.000Z</published>
    <updated>2020-12-03T09:57:10.009Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-boot-testing/java-testing.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;测试已经是贯穿我们程序员的日常开发流程了, 无论写个main方法, 还是使用测试框架Junit、AssertJ, 或者压测, 都是我们日常开发的一部分. 也有很多互联网公司推崇TDD（测试驱动开发）的. &lt;/p&gt;
&lt;p&gt;下面主要介绍&lt;code&gt;AssertJ&lt;/code&gt;、&lt;code&gt;JMH&lt;/code&gt;、&lt;code&gt;Gatling&lt;/code&gt;以及&lt;code&gt;ContPerf&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
      <category term="AssertJ" scheme="http://yangbingdong.com/tags/AssertJ/"/>
    
      <category term="JMH" scheme="http://yangbingdong.com/tags/JMH/"/>
    
      <category term="Gatling" scheme="http://yangbingdong.com/tags/Gatling/"/>
    
      <category term="ContPerf" scheme="http://yangbingdong.com/tags/ContPerf/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型(Creational)</title>
    <link href="http://yangbingdong.com/2018/design-pattern-creational/"/>
    <id>http://yangbingdong.com/2018/design-pattern-creational/</id>
    <published>2018-07-12T06:34:52.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/design-pattern/design-pattern-creation.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;创建型模式(&lt;code&gt;Creational Pattern&lt;/code&gt;)对类的实例化过程进行了抽象, 能够将软件模块中对象的创建和对象的使用分离. 为了使软件的结构更加清晰, 外界对于这些对象只需要知道它们共同的接口, 而不清楚其具体的实现细节, 使整个系统的设计更加符合单一职责原则. &lt;/p&gt;
&lt;p&gt;创建型模式在创建什么(What), 由谁创建(Who), 何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性. 创建型模式隐藏了类的实例的创建细节, 通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Design Pattern" scheme="http://yangbingdong.com/categories/Programming/Java/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://yangbingdong.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Stack Learning</title>
    <link href="http://yangbingdong.com/2018/spring-cloud-stack-learning/"/>
    <id>http://yangbingdong.com/2018/spring-cloud-stack-learning/</id>
    <published>2018-06-09T08:55:08.000Z</published>
    <updated>2020-04-07T10:15:47.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-cloud-docker-integration/spring-cloud-stack.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Cloud 是一系列框架的有序集合. 它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发, 如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等, 都可以用 Spring Boot 的开发风格做到一键启动和部署. Spring 并没有重复制造轮子, 它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来, 通过 Spring Boot 风格进行再封装屏蔽掉了复杂的配置和实现原理, 最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包. &lt;/p&gt;
&lt;p&gt;至于各种框架组件的相关概念以及入门教程网上一大把, 此篇博文主要记录个人在使用Spring Cloud构建微服务的一些配置以及踩坑…&lt;/p&gt;
&lt;p&gt;集成Docker部分请看 &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;/2018/spring-boot-docker-elk/&quot;&gt;Spring Boot Docker Integration&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Cloud" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Cloud/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Cloud" scheme="http://yangbingdong.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot应用集成Docker并结合Log4j2、Kafka、ELK管理Docker日志</title>
    <link href="http://yangbingdong.com/2018/spring-boot-docker-elk/"/>
    <id>http://yangbingdong.com/2018/spring-boot-docker-elk/</id>
    <published>2018-04-02T05:00:19.000Z</published>
    <updated>2020-07-20T05:42:01.746Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-cloud-docker-integration/java-docker.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;微服务架构下, 微服务在带来良好的设计和架构理念的同时, 也带来了运维上的额外复杂性, 尤其是在服务部署和服务监控上. 单体应用是集中式的, 就一个单体跑在一起, 部署和管理的时候非常简单, 而微服务是一个网状分布的, 有很多服务需要维护和管理, 对它进行部署和维护的时候则比较复杂. 集成Docker之后, 我们可以很方便地部署以及编排服务, ELK的集中式日志管理可以让我们很方便地聚合Docker日志. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://yangbingdong.com/tags/Spring/"/>
    
      <category term="Docker" scheme="http://yangbingdong.com/tags/Docker/"/>
    
      <category term="Elasticsearch" scheme="http://yangbingdong.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>转载—自己动手写区块链</title>
    <link href="http://yangbingdong.com/2018/write-your-own-blockchain/"/>
    <id>http://yangbingdong.com/2018/write-your-own-blockchain/</id>
    <published>2018-03-05T09:38:08.000Z</published>
    <updated>2020-04-07T10:15:47.018Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/blockchain/blockchain.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;区块链&lt;/strong&gt;（英语: blockchain 或 block chain）是用&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;分布式数据库&lt;/a&gt;识别、传播和记载信息的智能化&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;对等网络&lt;/a&gt;, 也称为价值互联网. &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%9C%AC%E8%81%AA&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;中本聪&lt;/a&gt;在2008年, 于《&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%AF%94%E7%89%B9%E5%B8%81&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;比特币&lt;/a&gt;白皮书》中提出“区块链”概念, 并在2009年创立了&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=%E6%AF%94%E7%89%B9%E5%B8%81%E7%A4%BE%E4%BC%9A%E7%BD%91%E7%BB%9C&amp;amp;action=edit&amp;amp;redlink=1&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;比特币社会网络&lt;/a&gt;, 开发出第一个区块, 即“创世区块”. &lt;/p&gt;
&lt;p&gt;区块链共享价值体系首先被众多的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86%E8%B2%A8%E5%B9%A3&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;加密货币&lt;/a&gt;效仿, 并在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AD%89%E6%98%8E&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;工作量证明&lt;/a&gt;上和算法上进行了改进, 如采用&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9D%83%E7%9B%8A%E8%AF%81%E6%98%8E&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;权益证明&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=SCrypt%E7%AE%97%E6%B3%95&amp;amp;action=edit&amp;amp;redlink=1&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;SCrypt算法&lt;/a&gt;. 随后, 区块链生态系统在全球不断进化, 出现了&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%A6%96%E6%AC%A1%E4%BB%A3%E5%B8%81%E5%8F%91%E5%94%AE&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;首次代币发售&lt;/a&gt;ICO；智能合约区块链&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E5%9D%8A&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;以太坊&lt;/a&gt;；“轻所有权、重使用权”的资产代币化&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%B1%E4%BA%AB%E7%B6%93%E6%BF%9F&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;共享经济&lt;/a&gt;； 和&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9B%BD%E5%AE%B6&amp;amp;action=edit&amp;amp;redlink=1&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;区块链国家&lt;/a&gt;. 目前, 人们正在利用这一共享价值体系, 在各行各业开发去中心化电脑程序(Decentralized applications, Dapp), 在全球各地构建&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E8%87%AA%E4%B8%BB%E7%BB%84%E7%BB%87&amp;amp;action=edit&amp;amp;redlink=1&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;去中心化自主组织&lt;/a&gt;和去中心化自主社区(Decentralized autonomous society, DAS). &lt;/p&gt;
&lt;p&gt;——来自维基百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Blockchain" scheme="http://yangbingdong.com/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习之MVC与Validation</title>
    <link href="http://yangbingdong.com/2018/spring-boot-mvc-validation/"/>
    <id>http://yangbingdong.com/2018/spring-boot-mvc-validation/</id>
    <published>2018-02-26T08:30:58.000Z</published>
    <updated>2020-07-20T05:56:22.871Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-boot-learning/spring-boot.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;此篇大部分是对Spring MVC的一个回顾以及JSR303中bean validation规范的学习&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://yangbingdong.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习之杂记篇</title>
    <link href="http://yangbingdong.com/2018/spring-boot-learning-hodgepodge/"/>
    <id>http://yangbingdong.com/2018/spring-boot-learning-hodgepodge/</id>
    <published>2018-02-25T07:25:35.000Z</published>
    <updated>2020-07-29T11:04:39.930Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-boot-learning/spring-boot.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Boot作为当下最流行的微服务项目构建基础, 有的时候我们根本不需要额外的配置就能够干很多的事情, 这得益于它的一个核心理念: “习惯优于配置”. . . &lt;/p&gt;
&lt;p&gt;说白的就是大部分的配置都已经按照&lt;del&gt;最佳实践&lt;/del&gt;的编程规范配置好了&lt;/p&gt;
&lt;p&gt;本文基于 Spring Boot 2的学习杂记, 还是与1.X版本还是有一定区别的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/categories/Programming/Java/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://yangbingdong.com/tags/Spring-Boot/"/>
    
      <category term="Spring" scheme="http://yangbingdong.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 杂谈</title>
    <link href="http://yangbingdong.com/2018/mysql-related-learning/"/>
    <id>http://yangbingdong.com/2018/mysql-related-learning/</id>
    <published>2018-02-16T07:16:18.000Z</published>
    <updated>2020-08-27T12:58:13.319Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/mysql-related-learning/MySQL.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MySQL 是一款开源的关系型数据库, 也是使用最广泛的数据库之一, 作为开发人员, 很有必要理解以及学习 MySQL 的一些相关知识.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yangbingdong.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yangbingdong.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>极致的追求, 高性能并发框架 Disruptor</title>
    <link href="http://yangbingdong.com/2018/disruptor-learning/"/>
    <id>http://yangbingdong.com/2018/disruptor-learning/</id>
    <published>2018-02-05T07:52:51.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/disruptor-learning/Models.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://lmax-exchange.github.io/disruptor/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Disruptor&lt;/a&gt;是英国外汇交易公司LMAX开发的一个高性能队列, 研发的初衷是&lt;strong&gt;解决内存队列的延迟问题&lt;/strong&gt;（在性能测试中发现竟然与I/O操作处于同样的数量级）. 基于Disruptor开发的系统单线程能支撑&lt;strong&gt;每秒600万订单&lt;/strong&gt;, 2010年在QCon演讲后, 获得了业界关注. 2011年, 企业应用软件专家Martin Fowler专门撰写长文介绍. 同年它还获得了Oracle官方的Duke大奖. 目前, 包括&lt;strong&gt;Apache Storm&lt;/strong&gt;、&lt;strong&gt;Camel&lt;/strong&gt;、&lt;strong&gt;Log4j2&lt;/strong&gt;、&lt;strong&gt;Reactor&lt;/strong&gt;在内的很多知名项目都应用或参考了Disruptor以获取高性能. &lt;/p&gt;
&lt;p&gt;其实Disruptor与其说是一个框架, 不如说是一种设计思路, 这个设计思路对于存在“并发、缓冲区、生产者—消费者模型、事务处理”这些元素的程序来说, Disruptor提出了一种大幅提升性能（TPS）的方案. &lt;/p&gt;
&lt;p&gt;听说小米也是用这个东东把亚马逊搞挂了: &lt;a href=&quot;http://bbs.xiaomi.cn/t-13417592&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;http://bbs.xiaomi.cn/t-13417592&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Disruptor" scheme="http://yangbingdong.com/tags/Disruptor/"/>
    
  </entry>
  
  <entry>
    <title>关于微服务的一些调研零散笔记</title>
    <link href="http://yangbingdong.com/2018/micro-service-ddd-notice/"/>
    <id>http://yangbingdong.com/2018/micro-service-ddd-notice/</id>
    <published>2018-01-02T08:59:14.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/micro-service/microservice.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E5%BE%AE%E6%9C%8D%E5%8B%99&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;微服务架构&lt;/a&gt;&lt;/em&gt;:&lt;br&gt;&lt;strong&gt;微服务&lt;/strong&gt; (Microservices) 是一种软件架构风格 (Software Architecture Style), 它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础, 利用模组化的方式组合出复杂的大型应用程序, 各功能区块使用与&lt;strong&gt;语言无关&lt;/strong&gt; (Language-Independent/Language agnostic) 的 &lt;strong&gt;API 集相互通讯&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不拆分存储的微服务是伪服务&lt;/strong&gt;: 在实践中, 我们常常见到一种架构, 后端存储是全部和在一个数据库中, 仅仅把前端的业务逻辑拆分到不同的服务进程中, 本质上和一个Monolithic一样, 只是把模块之间的进程内调用改为进程间调用, 这种切分不可取, 违反了分布式第一原则, &lt;strong&gt;模块耦合没有解决&lt;/strong&gt;, &lt;strong&gt;性能却受到了影响&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Docker可视化与管理工具</title>
    <link href="http://yangbingdong.com/2018/docker-visual-management-and-orchestrate-tools/"/>
    <id>http://yangbingdong.com/2018/docker-visual-management-and-orchestrate-tools/</id>
    <published>2018-01-02T04:57:52.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/docker-visual-management-and-orchestrate-tools/docker-managerment.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在学习了Docker的基本操作之后, 接下来就是Docker的管理部分了, 这包括Docker的可视化管理以及集群管理. &lt;/p&gt;
&lt;p&gt;此篇主要记录Docker私有库的搭建, Docker编排工具的介绍以及使用, 可视化管理工具的介绍以及搭建…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yangbingdong.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yangbingdong.com/tags/Docker/"/>
    
      <category term="Swarm" scheme="http://yangbingdong.com/tags/Swarm/"/>
    
  </entry>
  
  <entry>
    <title>使用 Reactor 进行反应式编程</title>
    <link href="http://yangbingdong.com/2017/with-reactor-response-encode/"/>
    <id>http://yangbingdong.com/2017/with-reactor-response-encode/</id>
    <published>2017-11-30T00:55:12.000Z</published>
    <updated>2020-04-07T10:15:47.018Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/with-reactor-response-encode/reactor.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;反应式编程（&lt;code&gt;Reactive Programming&lt;/code&gt;）这种新的编程范式越来越受到开发人员的欢迎. 在 Java 社区中比较流行的是 &lt;code&gt;RxJava&lt;/code&gt; 和 &lt;code&gt;RxJava 2&lt;/code&gt;. 本篇要介绍的是另外一个新的反应式编程库 &lt;em&gt;&lt;a href=&quot;https://github.com/reactor/reactor&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Rea&lt;/a&gt;&lt;a href=&quot;http://projectreactor.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ctor&lt;/a&gt;&lt;/em&gt;.&lt;br&gt;Reactor 框架是 &lt;strong&gt;Pivotal&lt;/strong&gt; 公司（开发 Spring 等技术的公司）开发的, 实现了 &lt;code&gt;Reactive Programming&lt;/code&gt; 思想, 符合 &lt;code&gt;Reactive Streams&lt;/code&gt; 规范（&lt;code&gt;Reactive Streams&lt;/code&gt; 是由 &lt;strong&gt;Netflix&lt;/strong&gt;、&lt;strong&gt;TypeSafe&lt;/strong&gt;、&lt;strong&gt;Pivotal&lt;/strong&gt; 等公司发起的）的一项技术. 其名字有反应堆之意, 反映了其背后的&lt;em&gt;强大的性能&lt;/em&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Reactor" scheme="http://yangbingdong.com/tags/Reactor/"/>
    
  </entry>
  
  <entry>
    <title>Spring5新特征与WebFlux反应式编程</title>
    <link href="http://yangbingdong.com/2017/new-in-spring-framework-5/"/>
    <id>http://yangbingdong.com/2017/new-in-spring-framework-5/</id>
    <published>2017-11-21T23:35:38.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/spring-framework-5/spring-framework-5.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring 5 于 2017 年 9 月发布了通用版本 (&lt;code&gt;GA&lt;/code&gt;), 它标志着自 2013 年 12 月以来第一个主要 Spring Framework 版本. 它提供了一些人们期待已久的改进, 还采用了一种全新的编程范例, 以&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://www.reactivemanifesto.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;反应式宣言&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;中陈述的反应式原则为基础. &lt;/p&gt;
&lt;p&gt;这个版本是很长时间以来最令人兴奋的 Spring Framework 版本. Spring 5 兼容 &lt;code&gt;Java™8&lt;/code&gt; 和 &lt;code&gt;JDK 9&lt;/code&gt;, 它集成了&lt;strong&gt;反应式流&lt;/strong&gt;, 以便提供一种颠覆性方法来实现端点和 Web 应用程序开发. &lt;/p&gt;
&lt;p&gt;诚然, 反应式编程不仅是此版本的主题, 还是令许多开发人员激动不已的重大特性. 人们对能够针对负载波动进行无缝扩展的灾备和响应式服务的需求在不断增加, Spring 5 很好地满足了这一需求. &lt;/p&gt;
&lt;p&gt;本文将全面介绍 Spring 5. 我将介绍 Java SE 8 和 Java EE 7 API 的基准升级、Spring 5 的新反应式编程模型、&lt;a href=&quot;https://www.ibm.com/developerworks/library/wa-http2-under-the-hood/index.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;HTTP/2&lt;/a&gt; 支持, 以及 Spring 通过 &lt;code&gt;Kotlin&lt;/code&gt; 对函数式编程的全面支持. 我还会简要介绍测试和性能增强, 最后介绍对 Spring 核心和容器的一般性修订. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Spring5" scheme="http://yangbingdong.com/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>设计模式原则与UML类图</title>
    <link href="http://yangbingdong.com/2017/design-pattern-uml-and-six-principle/"/>
    <id>http://yangbingdong.com/2017/design-pattern-uml-and-six-principle/</id>
    <published>2017-10-18T01:22:07.000Z</published>
    <updated>2021-01-05T02:01:06.514Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/design-pattern-uml-and-six-principle/designpatterns.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.google.co.jp/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjyks2QifnWAhVJKo8KHegiD20QFggnMAA&amp;amp;url=https%3A%2F%2Fzh.wikipedia.org%2Fzh-hans%2F%25E8%25AE%25BE%25E8%25AE%25A1%25E6%25A8%25A1%25E5%25BC%258F&amp;amp;usg=AOvVaw0z1ZKodwif8lD1sp_vC9C_&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;设计模式&lt;/a&gt;&lt;/em&gt;, 总的来说, 就是前人踩过无数的坑总结出来的软件设计经验. 在学习设计模式之前, 有必要了解它的一些&lt;strong&gt;规则&lt;/strong&gt;以及&lt;strong&gt;建模&lt;/strong&gt;.&lt;br&gt;&lt;em&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;UML&lt;/a&gt;&lt;/em&gt;(Unified Modeling Language)又称&lt;strong&gt;统一建模语言&lt;/strong&gt;或&lt;strong&gt;标准建模语言&lt;/strong&gt;, 是始于1997年一个OMG(Object Management Group)标准, 它是一个支持模型化和软件系统开发的图形化语言, 为软件开发的所有阶段提供模型化和可视化支持, 包括由需求分析到规格, 到构造和配置. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
      <category term="Design Pattern" scheme="http://yangbingdong.com/categories/Programming/Java/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://yangbingdong.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 常用命令</title>
    <link href="http://yangbingdong.com/2017/note-of-linux-command/"/>
    <id>http://yangbingdong.com/2017/note-of-linux-command/</id>
    <published>2017-09-20T10:05:10.000Z</published>
    <updated>2020-04-07T10:15:47.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/node-of-ubuntu-command/ubuntu-logo.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;=.= 这里只记录一些个人比较常用到的&lt;a href=&quot;https://www.ubuntu.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Ubuntu&lt;/em&gt;&lt;/a&gt;命令&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="OperatingSystem" scheme="http://yangbingdong.com/categories/OperatingSystem/"/>
    
      <category term="Ubuntu" scheme="http://yangbingdong.com/categories/OperatingSystem/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yangbingdong.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker入坑笔记</title>
    <link href="http://yangbingdong.com/2017/docker-learning/"/>
    <id>http://yangbingdong.com/2017/docker-learning/</id>
    <published>2017-09-07T07:55:07.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/docker/docker.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Docker是什么？下面是官方的一段说明:&lt;br&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://www.docker.com/what-docker&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Docker is the world’s leading software containerization platform.&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;恩, 很&lt;code&gt;niubility&lt;/code&gt;, 引领世界软件容器化的平台…&lt;br&gt;本篇主要记录Docker的基础学习（安装、简单使用）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yangbingdong.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yangbingdong.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Noob Tutorial</title>
    <link href="http://yangbingdong.com/2017/java-8-tutorial/"/>
    <id>http://yangbingdong.com/2017/java-8-tutorial/</id>
    <published>2017-05-03T10:23:06.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/java/java8.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“Java is still not dead—and people are starting to figure that out.”&lt;br&gt;Java 8是自Java  5（2004年）发布以来Java语言最大的一次版本升级, Java 8带来了很多的新特性, 包括Lambda 表达式、方法引用、流(Stream API)、默认方法、Optional、组合式异步编程、新的时间 API, 等等各个方面. 利用这些特征, 我们可以写出如同清泉般的简洁代码= =…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>VPS自搭建Ngrok内网穿透服务</title>
    <link href="http://yangbingdong.com/2017/self-hosted-build-ngrok-server/"/>
    <id>http://yangbingdong.com/2017/self-hosted-build-ngrok-server/</id>
    <published>2017-04-26T10:44:20.000Z</published>
    <updated>2020-07-22T08:46:56.011Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/ngrok.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Ngrok可以干嘛？我们经常会有 “把本机开发中的 web 项目给朋友看一下” 或 “测试一下支付宝、微信的支付功能” 这种临时需求, 为此&lt;strong&gt;专门&lt;/strong&gt;购买个域名然后在 VPS或云主机 上&lt;strong&gt;部署一遍&lt;/strong&gt;就有点太&lt;strong&gt;浪费&lt;/strong&gt;了. 那么这时候, &lt;strong&gt;Ngrok&lt;/strong&gt;就是个很好的东西, 它可以实现我们的这种需求. 而且 Ngrok 官网本身还提供了公共服务, 只需要注册一个帐号, 运行它的客户端, 就可以快速把内网映射出去. 不过这么好的服务, 没多久就被&lt;strong&gt;墙&lt;/strong&gt;了~幸好Ngrok是&lt;strong&gt;开源&lt;/strong&gt;的, 那么我们可以自己搭建一个Ngrok！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yangbingdong.com/categories/VPS/"/>
    
    
      <category term="VPS" scheme="http://yangbingdong.com/tags/VPS/"/>
    
      <category term="Ngrok" scheme="http://yangbingdong.com/tags/Ngrok/"/>
    
  </entry>
  
  <entry>
    <title>NGINX初学指南(安装与简单配置)</title>
    <link href="http://yangbingdong.com/2017/nginx-noob-guide/"/>
    <id>http://yangbingdong.com/2017/nginx-noob-guide/</id>
    <published>2017-04-24T08:56:15.000Z</published>
    <updated>2020-04-07T10:15:47.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/NGINX.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;走上了VPS这条&lt;del&gt;不归路&lt;/del&gt;, 就意味着需要会维护以及运营自己的服务器. 那么这一章记录一下学习Nginx的一些东西…&lt;br&gt;本文绝大部分内容来自NGINX 网站的官方手册:&lt;br&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://nginx.org/en/docs/beginners_guide.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;http://nginx.org/en/docs/beginners_guide.html&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://yangbingdong.com/categories/Nginx/"/>
    
    
      <category term="VPS" scheme="http://yangbingdong.com/tags/VPS/"/>
    
      <category term="Nginx" scheme="http://yangbingdong.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>V2Proxy 正确的代理模式</title>
    <link href="http://yangbingdong.com/2017/v2proxy/"/>
    <id>http://yangbingdong.com/2017/v2proxy/</id>
    <published>2017-04-19T10:15:57.000Z</published>
    <updated>2020-08-14T10:50:24.188Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/vps/whats-shadowsocks-04.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;作为一名开发人员, 日常离不开 Google, 那么在这之前, 必须要先学会如何代理.&lt;/p&gt;
&lt;p&gt;本人 &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://www.linode.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Linode&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; 邀请码: &lt;code&gt;79e24952d46644605b071a55c4fda3b23e1d1a5a&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yangbingdong.com/categories/VPS/"/>
    
    
      <category term="VPS" scheme="http://yangbingdong.com/tags/VPS/"/>
    
      <category term="ShadowSocks" scheme="http://yangbingdong.com/tags/ShadowSocks/"/>
    
      <category term="V2Ray" scheme="http://yangbingdong.com/tags/V2Ray/"/>
    
      <category term="Trojan" scheme="http://yangbingdong.com/tags/Trojan/"/>
    
  </entry>
  
  <entry>
    <title>Java基本数据类型传递与引用传递的那点事</title>
    <link href="http://yangbingdong.com/2017/java-call-by-value/"/>
    <id>http://yangbingdong.com/2017/java-call-by-value/</id>
    <published>2017-04-18T07:36:30.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/java/201611161519205180.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天在逛博客的时候看到了有意思的东西, 下面代码会输出什么？&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s = &lt;span class=&quot;string&quot;&gt;&quot;123&quot;&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt; &lt;/span&gt;&amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String s = &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    change(s);     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(s);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结果是&lt;code&gt;abc&lt;/code&gt;.&lt;br&gt;为什么？经过一番查找与理解, 又学习到了…&lt;br&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="Java basics" scheme="http://yangbingdong.com/tags/Java-basics/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下使用IntelliJ IDEA的正确姿势</title>
    <link href="http://yangbingdong.com/2017/note-of-learning-idea-under-ubuntu/"/>
    <id>http://yangbingdong.com/2017/note-of-learning-idea-under-ubuntu/</id>
    <published>2017-04-17T10:00:00.000Z</published>
    <updated>2020-11-27T08:55:10.414Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/learning-idea-under-ubuntu/idea2.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;公司里的大牛们用的IDE基本都是IDEA&lt;del&gt;近墨者黑&lt;/del&gt;, 早就听闻IntelliJ IDEA这个大名, 只不过当初比较菜鸟还不会用(…虽然现在也还是个菜鸟=.=), 再不用就要被OUT了&lt;br&gt;此篇把在Ubuntu下使用IDEA的学习经验记录下来(网上还是比较少资料解决Ubuntu下IDEA的问题Orz), 以便老了记性不好可以看一看…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://yangbingdong.com/categories/IDE/"/>
    
    
      <category term="Ubuntu" scheme="http://yangbingdong.com/tags/Ubuntu/"/>
    
      <category term="IDE" scheme="http://yangbingdong.com/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>JVM知识杂汇</title>
    <link href="http://yangbingdong.com/2017/jvm-knowledge-collect-01/"/>
    <id>http://yangbingdong.com/2017/jvm-knowledge-collect-01/</id>
    <published>2017-03-09T05:04:51.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/jvm/structure.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想要深刻地理解Java, 那么就要深入地理解底层——JVM(Java Virtual Machine | Java虚拟机).&lt;br&gt;JVM（Java Virtual Machine）Java 虚拟机是整个 java 平台的基石, 是 java 系统实现硬件无关与操作系统无关的关键部分, 是保障用户机器免于恶意代码损害的屏障. Java开发人员不需要了解JVM是如何工作的, 但是, 了解 JVM 有助于我们更好的开（通）发（过） java（公司） 程（面）序（试）&lt;br&gt;博主经过一番查阅, 找到了自认为写的好的一些文章, 并记录总结, 方便不定时的看.&lt;br&gt;希望每次看都会有新的领悟, 不断提高自己. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yangbingdong.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java开发人员最常犯的10个错误以及35个代码性能优化小结</title>
    <link href="http://yangbingdong.com/2017/java-dev-ten-mistake-and-some-advice/"/>
    <id>http://yangbingdong.com/2017/java-dev-ten-mistake-and-some-advice/</id>
    <published>2017-03-07T12:40:46.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/java/mistake.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;人非圣贤孰能无过, 编程更是一门要求非常严谨的学问, 难免会在敲代码时一个不留神就产生一个BUG, 解决一个BUG难免又会出现十个BUG.&lt;br&gt;代码优化, 一个很重要的课题. 可能有些人觉得没用, 一些细小的地方有什么好修改的, 改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的, 就像大海里面的鲸鱼一样, 它吃一条小虾米有用吗？没用, 但是, 吃的小虾米一多之后, 鲸鱼就被喂饱了. 代码优化也是一样, 如果项目着眼于尽快无BUG上线, 那么此时可以抓大放小, 代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码, 这时候就必须考虑每个可以优化的细节了, 一个一个细小的优化点累积起来, 对于代码的运行效率绝对是有提升的.&lt;br&gt;下面博主就分享一下Java开发人员最常犯的10个错误以及一些代码优化, 也希望自己把这些优化当成习惯融入平时.&lt;br&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://yangbingdong.com/categories/Programming/"/>
    
      <category term="Java" scheme="http://yangbingdong.com/categories/Programming/Java/"/>
    
    
      <category term="Java" scheme="http://yangbingdong.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo搭建个人博客——进阶篇(从入门到入土)</title>
    <link href="http://yangbingdong.com/2017/build-blog-hexo-advanced/"/>
    <id>http://yangbingdong.com/2017/build-blog-hexo-advanced/</id>
    <published>2017-02-21T15:07:34.000Z</published>
    <updated>2020-04-07T10:15:47.006Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/build-hexo/next.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;好久没更新了, 因为懒- -&lt;br&gt;前面介绍了Hexo的一些基本搭建→&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;/2017/build-blog-hexo-base/&quot;&gt;基于Hexo+github+coding搭建个人博客——基础篇(从菜鸟到放弃)&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;对于追求装X的博主来说, 基本的搭建是满足不了的, 接下来整理了一下各方面的细节优化, 包括页面字体大小、配色、背景、SEO(搜索引擎优化)、域名绑定、DNS域名解析实现负载均衡等.&lt;br&gt;关于&lt;code&gt;NexT&lt;/code&gt;主题的很多配置、插件都可以在&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;theme-next.iissnan.com/getting-started.html&quot;&gt;官方文档&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;找到答案, 那么博主只是整理了一些官方没怎么提及的细节优化. &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yangbingdong.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yangbingdong.com/tags/Hexo/"/>
    
      <category term="Node.js" scheme="http://yangbingdong.com/tags/Node-js/"/>
    
      <category term="Github" scheme="http://yangbingdong.com/tags/Github/"/>
    
      <category term="Coding" scheme="http://yangbingdong.com/tags/Coding/"/>
    
      <category term="Git" scheme="http://yangbingdong.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu的Java开发环境基本搭建</title>
    <link href="http://yangbingdong.com/2017/ubuntu-dev-environment-to-build/"/>
    <id>http://yangbingdong.com/2017/ubuntu-dev-environment-to-build/</id>
    <published>2017-01-20T03:31:22.000Z</published>
    <updated>2021-01-05T04:01:58.012Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/javaDevEnv/maxresdefault.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近公司的电脑由于不明原因老是奔溃, 重装过两次, 在家里也比较喜欢折腾系统, 为了不用每次都度娘谷歌, 记录下来, 一条龙走过. 博主是搞爪哇开发的, 那么以下搭建针对的是爪哇环境开发&lt;/p&gt;
    
    </summary>
    
      <category term="OperatingSystem" scheme="http://yangbingdong.com/categories/OperatingSystem/"/>
    
      <category term="Ubuntu" scheme="http://yangbingdong.com/categories/OperatingSystem/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yangbingdong.com/tags/Ubuntu/"/>
    
      <category term="IDE" scheme="http://yangbingdong.com/tags/IDE/"/>
    
      <category term="JDK" scheme="http://yangbingdong.com/tags/JDK/"/>
    
      <category term="Tomcat" scheme="http://yangbingdong.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="http://yangbingdong.com/2017/note-of-learning-git/"/>
    <id>http://yangbingdong.com/2017/note-of-learning-git/</id>
    <published>2017-01-18T04:42:52.000Z</published>
    <updated>2020-07-15T11:20:22.422Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/git/git-operations.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;What is Git?&lt;br&gt;Git是目前世界上最先进的分布式版本控制系统（没有之一）, 而且是一款免费、开源的分布式版本控制系统, 用于敏捷高效地处理任何或小或大的项目&lt;br&gt;一直以来, 博主开发项目用的版本管理系用都是SVN&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;集中式版本管理系统之一
&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;, 其实早就听闻过Git, 一直没用过, 后来接触Github和Hexo博客框架, 才真正意义上开始接触Git, 感受就是高端大气上档次！&lt;/p&gt;
    
    </summary>
    
      <category term="Git/Github" scheme="http://yangbingdong.com/categories/Git-Github/"/>
    
    
      <category term="Github" scheme="http://yangbingdong.com/tags/Github/"/>
    
      <category term="Git" scheme="http://yangbingdong.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo+Github+Coding搭建个人博客——基础篇(从菜鸟到放弃)</title>
    <link href="http://yangbingdong.com/2017/build-blog-hexo-base/"/>
    <id>http://yangbingdong.com/2017/build-blog-hexo-base/</id>
    <published>2017-01-15T12:44:05.000Z</published>
    <updated>2020-11-30T13:17:22.433Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/build-hexo/hexoGoverment.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;搭建此博客的动机以及好处在此就不多谈了, 之前已经表达过, 详情请看&lt;em&gt;&lt;a href=&quot;/2017/hello-world/&quot;&gt;Start My Blog Trip — Power By Hexo&lt;/a&gt;&lt;/em&gt;&lt;br&gt;记录一下搭建的基本过程以及遇到的一些问题, 仅供参考&lt;br&gt;= =废话不多说, 进入主题&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yangbingdong.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yangbingdong.com/tags/Hexo/"/>
    
      <category term="Node.js" scheme="http://yangbingdong.com/tags/Node-js/"/>
    
      <category term="Github" scheme="http://yangbingdong.com/tags/Github/"/>
    
      <category term="Coding" scheme="http://yangbingdong.com/tags/Coding/"/>
    
      <category term="Git" scheme="http://yangbingdong.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu主题美化与常用软件记录</title>
    <link href="http://yangbingdong.com/2017/ubuntu-todo-after-install/"/>
    <id>http://yangbingdong.com/2017/ubuntu-todo-after-install/</id>
    <published>2017-01-12T15:04:36.000Z</published>
    <updated>2020-07-18T03:36:31.641Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/individuation/ubuntu-desktop.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 时间已经来到了9102年, 当初的&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://www.ubuntu.com/download/desktop&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Ubuntu 18.04 LTS&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; 版本已经回归GNOME环境, 各种主题优化教程也层出不穷了, 说明 Ubuntu 的使用人群也渐渐增加…&lt;/p&gt;
&lt;p&gt; 一键安装主题软件脚本: &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/masteranthoneyd/ubuntu-desktop-initializer&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ubuntu-desktop-initializer&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="OperatingSystem" scheme="http://yangbingdong.com/categories/OperatingSystem/"/>
    
      <category term="Ubuntu" scheme="http://yangbingdong.com/categories/OperatingSystem/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yangbingdong.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04下MyEclipse安装与破解</title>
    <link href="http://yangbingdong.com/2017/ubuntu-myeclipse-crack/"/>
    <id>http://yangbingdong.com/2017/ubuntu-myeclipse-crack/</id>
    <published>2017-01-11T03:52:00.000Z</published>
    <updated>2020-04-07T10:15:47.014Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/ubuntu-myclipse-crack/myeclipseInfo.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前一直用的是Eclipse Luna, 没有用MyEclipse是因为它&lt;strong&gt;收钱&lt;/strong&gt;的- -, 去新公司工作需要用到MyEclipse, 下载安装happy地&lt;strong&gt;试用&lt;/strong&gt;了将近一个月, 不幸, 试用期已过. 身为一个开源爱好者, 不想去用破解的（虚伪 - -）, 也不想出钱, 博主秉着屌丝的意志, 一番折腾过后, 搞定. 以下是经过参考与总结得到的操作步骤, 博主用的是Linux的发行版Ubuntu, 所以以下步骤针对Ubuntu系统, win与mac的步骤也大同小异.&lt;br&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://yangbingdong.com/categories/IDE/"/>
    
    
      <category term="Ubuntu" scheme="http://yangbingdong.com/tags/Ubuntu/"/>
    
      <category term="IDE" scheme="http://yangbingdong.com/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Start My Blog Trip — Power By Hexo</title>
    <link href="http://yangbingdong.com/2017/hello-world/"/>
    <id>http://yangbingdong.com/2017/hello-world/</id>
    <published>2017-01-10T15:49:28.000Z</published>
    <updated>2020-04-07T10:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.yangbingdong.com/img/hello-world/start-trip.png&quot; alt&gt;&lt;br&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Life is a generic method like [ public &lt;t&gt; Life doSomething(T t){} ],T is the part of life that requires you to play in a period of time,and the method will return a life you expect if you to be T.&lt;br&gt;                                    —— &lt;strong&gt;&lt;em&gt;沃·兹基硕德&lt;/em&gt;&lt;/strong&gt;&lt;/t&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;为什么要写博客？除了可以将自己在工作学习中的一些知识及经验记录下来. 不断积累知识, 不断总结经验以外, 更重要的是 &lt;em&gt;&lt;a href=&quot;http://www.15yan.com/topic/chuang-zuo-de-mi-mi/i0sBdlKnryf/?f=wx&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;为了保持逼格, 不要停止写作&lt;/a&gt;&lt;/em&gt; . 虽然高中的语文&lt;strong&gt;从来&lt;/strong&gt;都没有及格过, 作文也写得挺烂, 但我会尽力得用我拙劣的语言把每一篇博客都写好…&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://yangbingdong.com/categories/Essay/"/>
    
    
      <category term="Hexo" scheme="http://yangbingdong.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
